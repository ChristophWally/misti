indexname,index_statement
idx_audio_metadata_consistency,CREATE INDEX idx_audio_metadata_consistency ON public.word_audio_metadata USING btree (voice_consistency_group);
idx_audio_metadata_filename,CREATE INDEX idx_audio_metadata_filename ON public.word_audio_metadata USING btree (audio_filename);
idx_audio_metadata_source,"CREATE INDEX idx_audio_metadata_source ON public.word_audio_metadata USING btree (source_table, source_id);"
idx_audio_metadata_unique_source,"CREATE UNIQUE INDEX idx_audio_metadata_unique_source ON public.word_audio_metadata USING btree (source_table, source_id);"
idx_audio_metadata_voice,CREATE INDEX idx_audio_metadata_voice ON public.word_audio_metadata USING btree (azure_voice_name);
idx_audio_metadata_word_id,CREATE INDEX idx_audio_metadata_word_id ON public.word_audio_metadata USING btree (word_id);
idx_deck_words_deck_id,CREATE INDEX idx_deck_words_deck_id ON public.deck_words USING btree (deck_id);
idx_deck_words_word_id,CREATE INDEX idx_deck_words_word_id ON public.deck_words USING btree (word_id);
idx_decks_user_id,CREATE INDEX idx_decks_user_id ON public.decks USING btree (user_id);
idx_dictionary_english_search,CREATE INDEX idx_dictionary_english_search ON public.dictionary USING btree (english);
idx_dictionary_italian_search,CREATE INDEX idx_dictionary_italian_search ON public.dictionary USING btree (italian);
idx_dictionary_tags,CREATE INDEX idx_dictionary_tags ON public.dictionary USING gin (tags);
idx_dictionary_word_type,CREATE INDEX idx_dictionary_word_type ON public.dictionary USING btree (word_type);
idx_sentences_difficulty,CREATE INDEX idx_sentences_difficulty ON public.sentences USING btree (difficulty_level);
idx_sentences_search,"CREATE INDEX idx_sentences_search ON public.sentences USING gin (to_tsvector('italian'::regconfig, italian_text));"
idx_sentences_tags,CREATE INDEX idx_sentences_tags ON public.sentences USING gin (topic_tags);
idx_user_progress_deck,CREATE INDEX idx_user_progress_deck ON public.user_word_progress USING btree (deck_id) WHERE (deck_id IS NOT NULL);
idx_user_progress_due_reviews,CREATE INDEX idx_user_progress_due_reviews ON public.user_word_progress USING btree (next_review);
idx_user_progress_target,"CREATE INDEX idx_user_progress_target ON public.user_word_progress USING btree (target_table, target_id);"
idx_user_progress_user_reviews,"CREATE INDEX idx_user_progress_user_reviews ON public.user_word_progress USING btree (user_id, next_review);"
idx_word_audio_metadata_filename,CREATE INDEX idx_word_audio_metadata_filename ON public.word_audio_metadata USING btree (audio_filename);
idx_word_audio_metadata_generated_at,CREATE INDEX idx_word_audio_metadata_generated_at ON public.word_audio_metadata USING btree (generated_at);
idx_word_audio_metadata_needs_regen,CREATE INDEX idx_word_audio_metadata_needs_regen ON public.word_audio_metadata USING btree (needs_regeneration) WHERE (needs_regeneration = true);
idx_word_audio_metadata_play_count,CREATE INDEX idx_word_audio_metadata_play_count ON public.word_audio_metadata USING btree (play_count DESC);
idx_word_audio_metadata_voice,CREATE INDEX idx_word_audio_metadata_voice ON public.word_audio_metadata USING btree (azure_voice_name);
idx_word_audio_metadata_word_id,CREATE INDEX idx_word_audio_metadata_word_id ON public.word_audio_metadata USING btree (word_id);
idx_word_forms_audio_metadata,CREATE INDEX idx_word_forms_audio_metadata ON public.word_forms USING btree (audio_metadata_id);
idx_word_forms_grammatical_pattern,"CREATE INDEX idx_word_forms_grammatical_pattern ON public.word_forms USING btree (form_mood, form_tense, form_person, form_number);"
idx_word_forms_mood_tense,"CREATE INDEX idx_word_forms_mood_tense ON public.word_forms USING btree (form_mood, form_tense);"
idx_word_forms_person_number,"CREATE INDEX idx_word_forms_person_number ON public.word_forms USING btree (form_person, form_number);"
idx_word_forms_regularity,"CREATE INDEX idx_word_forms_regularity ON public.word_forms USING btree (word_id, form_mood, form_tense, regularity);"
idx_word_forms_tags,CREATE INDEX idx_word_forms_tags ON public.word_forms USING gin (tags);
idx_word_forms_text_search,CREATE INDEX idx_word_forms_text_search ON public.word_forms USING btree (form_text);
idx_word_forms_type,CREATE INDEX idx_word_forms_type ON public.word_forms USING btree (form_type);
idx_word_forms_unique_combination,"CREATE UNIQUE INDEX idx_word_forms_unique_combination ON public.word_forms USING btree (word_id, form_text, form_type, COALESCE(form_mood, ''::text), COALESCE(form_tense, ''::text), COALESCE(form_person, ''::text), COALESCE(form_number, ''::text));"
idx_word_forms_verb_analysis,"CREATE INDEX idx_word_forms_verb_analysis ON public.word_forms USING btree (form_mood, form_tense, form_person, form_number) WHERE (form_type = ANY (ARRAY['conjugation'::text, 'compound_tense'::text]));"
idx_word_forms_word_id,CREATE INDEX idx_word_forms_word_id ON public.word_forms USING btree (word_id);
idx_word_relationships_source,CREATE INDEX idx_word_relationships_source ON public.word_relationships USING btree (source_word_id);
idx_word_relationships_target,CREATE INDEX idx_word_relationships_target ON public.word_relationships USING btree (target_word_id);
idx_word_relationships_type,CREATE INDEX idx_word_relationships_type ON public.word_relationships USING btree (relationship_type);
pk_deck_words,CREATE UNIQUE INDEX pk_deck_words ON public.deck_words USING btree (id);
pk_decks,CREATE UNIQUE INDEX pk_decks ON public.decks USING btree (id);
pk_dictionary,CREATE UNIQUE INDEX pk_dictionary ON public.dictionary USING btree (id);
pk_word_audio_metadata,CREATE UNIQUE INDEX pk_word_audio_metadata ON public.word_audio_metadata USING btree (id);
pk_word_forms,CREATE UNIQUE INDEX pk_word_forms ON public.word_forms USING btree (id);
unique_relationship,"CREATE UNIQUE INDEX unique_relationship ON public.word_relationships USING btree (source_word_id, target_word_id, relationship_type);"
unique_user_target_progress,"CREATE UNIQUE INDEX unique_user_target_progress ON public.user_word_progress USING btree (user_id, target_table, target_id, deck_id);"